### DEPLOYMENT CONFIG FILE #############################################
# The 'drone-deploy' cli app uses this file to configure terraform.
# Any of these values can be overidden by exporting a corresponding env
# var. E.g, export DRONE_AWS_REGION=us-east-2 overwrites drone_aws_region
#########################################################################
## WHERE TO DEPLOY
# us-east-1, vpc_123456 for example
drone_aws_region:
drone_vpc_id:


## DRONE VERSIONS
# server, agent, and cli (docker defaults to 'latest')
drone_server_docker_image: drone/drone:1
drone_agent_docker_image: drone/agent:1
drone_cli_version: 1.0.8


## ROUTE53 DOMAIN
# I.E., 'drone.yourdomain.com'
drone_server_machine_name:
drone_server_hosted_zone:


## DRONE SERVER INSTANCE SETTINGS
# drone server is very lightweight, so a t2.micro will be fine in most cases.
# You scale by adding as many build-agents (they do the actual work) as desired.
# see README.md for more info.
drone_server_key_pair_name: drone-server
drone_server_instance_type: t2.micro
drone_docker_compose_version: 1.24.0


## DRONE SERVER FIREWALL ACL'S (aws security groups)
# note http and https must be open for drone server to get automatic TLS
# certs from lets encrypt.You can always lock down the ports once the 
# cert has been issued, and then again when it's time to renew. The /32 
# at the end of an ip address signals that it is a single ip, not a range.
# 0.0.0.0/0 means allow all.
drone_server_allow_http:
- 0.0.0.0/0
drone_server_allow_https:
- 0.0.0.0/0
drone_server_allow_ssh:
- your.admins.ip.address/32
# note: if you do not need ssh access to the drone-server, remove them.


# When drone_open is set to false, then only the github usernames in the
# drone_user_filter are allowed to register as users. If set to true, then
# anyone (the public) can register. The drone_admin is likely your github
# username.
drone_open: false
drone_admin: your_github_user_name
drone_user_filter:
- github_user_name_1
- github_user_name_2

# SERVER TLS CERTS - email is neccesary for automatic Let's Encrypt TLS certs.
drone_admin_email: youremailaddy@yourdomain.com


# GITHUB OATH SETTINGS
# You should set sensitive data like the folowing secrets as environment
# variables instead of storing them here. Especially if you commit this
# file to git. drone-deploy automatically uses corresponding env vars if
# they are set. e.g., 'export DRONE_GITHUB_CLIENT_ID=12345667788643453'
drone_github_server: https://github.com
drone_github_client_id:
drone_github_client_secret:


# DRONE AGENT SETTINGS
drone_agents_enabled: true
drone_server_proto: https
# the url the agents use to connect to the drone server (likely the same
# as https:// + drone_server_machine_name + drone_server_hosted_zone)
drone_server_host: https://yourdroneserver



#~~~~~~~~~~~~~~~~~~~~~~ THE SETTINGS BELOW ARE AUTOGENERATED ~~~~~~~~~~~~~~~~~~~~~~~~
# These settings are autogenerated, but can be overridden by exporting them as env
# vars. E.g., 'export DRONE_RPC_SECRET=foo'. You can view the current values anytime
# by running 'drone-deploy show <deployment-name>'
drone_rpc_secret:
drone_server_ami:
drone_deployment_id:
drone_deployment_name:
drone_builder_role_arn:
drone_s3_bucket:
