### DEPLOYMENT CONFIG FILE #############################################
# The 'drone-deploy' cli app uses this file to configure terraform.
# Specifically, it creates a terraform.tfvars file in the ./terraform
# directory, which is automatically loaded during deployments.
#########################################################################
## WHERE TO DEPLOY
aws_region: us-east-1
vpc_id: ""


## ROUTE53 DOMAIN
# I.E., 'drone.yourdomain.com'
host_name: drone
hosted_zone: yourdomain.com


## DRONE SERVER INSTANCE SETTINGS
drone_server_key_pair_name: ""
drone_server_instance_type: t2.micro
docker_compose_version: 1.24.0


## DRONE SERVER FIREWALL ACL'S (aws security groups)
# http and https must be open for drone server to get automatic TLS
# certs from lets encrypt. We should move to dns challenge instead 
# http/https challenge in the future if you want to lock down ports
# 80 and 443. You can always lock down the ports once the cert has
# been issued, and then again when it's time to renew.
# 0.0.0.0/0 == 'Allow all ip addresses.'
# /32 == 'one ip address'
drone_server_allow_http:
- 0.0.0.0/0
drone_server_allow_https:
- 0.0.0.0/0
drone_server_allow_ssh:
- your.public.ip.address/32
- another.admins.ip.address/32

# note: if you do not need ssh access to the drone-server, remove them


# DRONE SERVER REGISTRATION SETTINGS
drone_open: false
drone_admin: your_github_user_name
drone_user_filter:
- your_github_user_name
- another_github_user_name


# GITHUB OATH SETTINGS
github_server: https://github.com
github_client_id: 12345678903423
github_client_secret: abcdefghijklmnopqrtub123555afd34134


# DRONE SETTINGS
drone_agents_enabled: true
drone_tls_autocert: false
drone_cli_version: 1.0.8
drone_server_docker_image: drone/drone:1


## THE SETTINGS BELOW ARE AUTOGENERATED
# The 'drone-server' cli will add/update the following settings, but they
# can be edited directly if needed.
drone_server_ami: ""
drone_deployment_id: ""
drone_builder_arn: ""
