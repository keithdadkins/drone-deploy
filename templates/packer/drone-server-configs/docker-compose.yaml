version: '3'

services:
  drone-proxy:
    image: abiosoft/caddy
    command: --conf /etc/Caddyfile --log stdout -agree
    restart: always
    depends_on:
      - drone-server
    ports:
      - 80:80
      - 443:443
    volumes:
      - /home/ubuntu/caddy:/root/.caddy
      - /home/ubuntu/Caddyfile:/etc/Caddyfile
    environment:
      - CADDYPATH=/root/.caddy
  drone-server:
    image: ${DRONE_SERVER_DOCKER_IMAGE}
    ports:
      - 80
    volumes:
      - /home/ubuntu/drone_data:/data
    restart: always
    environment:
      - DEBUG=true
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}
      - DRONE_ADMIN=${DRONE_ADMIN}
      - DRONE_USER_FILTER=${DRONE_USER_FILTER}
      - DRONE_OPEN=false
      - DRONE_SERVER_HOST=${DRONE_SERVER_HOST}
      - DRONE_SERVER_PROTO=http
      - DRONE_GITHUB_SERVER=https://github.com
      - DRONE_GITHUB_CLIENT_ID=${DRONE_GITHUB_CLIENT_ID}
      - DRONE_GITHUB_CLIENT_SECRET=${DRONE_GITHUB_CLIENT_SECRET}
      - DRONE_AGENTS_ENABLED=true
      - DRONE_DATABASE_DATASOURCE=/data/database.sqlite
      - DRONE_S3_BUCKET=${DRONE_S3_BUCKET}
      - AWS_REGION=${DRONE_AWS_REGION}
  drone-agent:
    image: ${DRONE_AGENT_DOCKER_IMAGE}
    restart: always
    depends_on:
      - drone-server
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DRONE_RPC_SERVER=http://drone-server
      - DRONE_RUNNER_CAPACITY=1
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}
